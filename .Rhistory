# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","GeneName","GB_LIST","Gene_Symbol","SPOT_ID"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
# Visualize and quality control test results.
# Build histogram of P-values for all genes. Normal test
# assumption is that most genes are not differentially expressed.
tT2 <- topTable(fit2, adjust="fdr", sort.by="B", number=Inf)
hist(tT2$adj.P.Val, col = "grey", border = "white", xlab = "P-adj",
ylab = "Number of genes", main = "P-adj value distribution")
# Venn diagram of results
vennDiagram(dT, circle.col=palette())
# summarize test results as "up", "down" or "not expressed"
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05, lfc=1)
# Venn diagram of results
vennDiagram(dT, circle.col=palette())
# create Q-Q plot for t-statistic
t.good <- which(!is.na(fit2$F)) # filter out bad probes
qqt(fit2$t[t.good], fit2$df.total[t.good], main="Moderated t statistic")
# summarize test results as "up", "down" or "not expressed"
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05, lfc=1)
# Venn diagram of results
vennDiagram(dT, circle.col=palette())
# create Q-Q plot for t-statistic
t.good <- which(!is.na(fit2$F)) # filter out bad probes
qqt(fit2$t[t.good], fit2$df.total[t.good], main="Moderated t statistic")
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
ct <- 1        # choose contrast of interest
# Please note that the code provided to generate graphs serves as a guidance to
# the users. It does not replicate the exact GEO2R web display due to multitude
# of graphical options.
#
# The following will produce basic volcano plot using limma function:
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
# MD plot (log fold change vs mean log expression)
# highlight statistically significant (p-adj < 0.05) probes
plotMD(fit2, column=ct, status=dT[,ct], legend=F, pch=20, cex=1)
abline(h=0)
View(fit2)
# Venn diagram of results
vennDiagram(dT, circle.col=palette())
# Please note that the code provided to generate graphs serves as a guidance to
# the users. It does not replicate the exact GEO2R web display due to multitude
# of graphical options.
#
# The following will produce basic volcano plot using limma function:
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
ct
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
fit2
View(fit2)
fit2[["coefficients"]]
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
ct <- 1        # choose contrast of interest
# Please note that the code provided to generate graphs serves as a guidance to
# the users. It does not replicate the exact GEO2R web display due to multitude
# of graphical options.
#
# The following will produce basic volcano plot using limma function:
volcanoplot(fit2, coef=ct, main=colnames(fit2)[ct], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
# MD plot (log fold change vs mean log expression)
# highlight statistically significant (p-adj < 0.05) probes
plotMD(fit2, column=ct, status=dT[,ct], legend=F, pch=20, cex=1)
################################################################
# General expression data analysis
ex <- exprs(gset)
# box-and-whisker plot
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
title <- paste ("GSE26125", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
ex
ord
gs
order(gs)
# expression value distribution
par(mar=c(4,4,2,1))
title <- paste ("GSE26125", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, group=gs, main=title, legend ="topright")
# Example data
library(ggplot2)
# Assuming 'expr_data' is a matrix of normalized expression values (rows = genes, columns = samples)
expr_data_log <- log2(expr_data + 1)  # Log2 transform the data if necessary
# Assuming 'expr_data' is a matrix of normalized expression values (rows = genes, columns = samples)
expr_data_log <- log2(exprs(gset) + 1)  # Log2 transform the data if necessary
# Convert to long format for ggplot2
expr_df <- as.data.frame(expr_data_log)
expr_long <- reshape2::melt(expr_df)
# Plot the density
ggplot(expr_long, aes(x = value, color = variable)) +
geom_density() +
labs(title = "Expression Value Density Plot", x = "Expression Values (log2)", y = "Density") +
theme_minimal()
par(mar=c(7,4,2,1))
title <- paste ("GSE26125", "/", annotation(gset), sep ="")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
# expression value distribution
par(mar=c(4,4,2,1))
title <- paste ("GSE26125", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, group=gs, main=title, legend ="topright")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
# expression value distribution
par(mar=c(4,4,2,1))
title <- paste ("GSE26125", "/", annotation(gset), " value distribution", sep ="")
plotDensities(ex, group=gs, main=title, legend ="topright")
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=1, col=gs[ord])
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
par(cex.axis=1)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
par(cex.axis=1)
par(cex.axis=1)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord])
par(cex.axis=0)
par(cex.axis=0.9)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord], cex.axis=1)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord], cex.axis=1)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord], cex.axis=0.9)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord], cex.axis=0.5)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord], cex.axis=0.7)
boxplot(ex[,ord], boxwex=0.6, notch=T, main=title, outline=FALSE, las=2, col=gs[ord], cex.axis=0.6)
# Venn diagram of results
vennDiagram(dT, circle.col=palette())
# mean-variance trend, helps to see if precision weights are needed
plotSA(fit2, main="Mean variance trend, GSE26125")
plot(ump$layout, main="UMAP plot, nbrs=9", xlab="", ylab="", col=gs, pch=20, cex=1.5)
ump <- umap(t(ex), n_neighbors = 9, random_state = 123)
# UMAP plot (dimensionality reduction)
ex <- na.omit(ex) # eliminate rows with NAs
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 9, random_state = 123)
library(umap)
# UMAP plot (dimensionality reduction)
ex <- na.omit(ex) # eliminate rows with NAs
ex <- ex[!duplicated(ex), ]  # remove duplicates
ump <- umap(t(ex), n_neighbors = 9, random_state = 123)
par(mar=c(3,3,2,6), xpd=TRUE)
plot(ump$layout, main="UMAP plot, nbrs=9", xlab="", ylab="", col=gs, pch=20, cex=1.5)
legend("topright", inset=c(-0.15,0), legend=levels(gs), pch=20,
col=1:nlevels(gs), title="Group", pt.cex=1.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
plot(ump$layout, main="UMAP plot, nbrs=9", xlab="", ylab="", col=gs, pch=20, cex=1.5)
legend("bottomright", inset=c(-0.15,0), legend=levels(gs), pch=20,
col=1:nlevels(gs), title="Group", pt.cex=0.5)
library("maptools")  # point labels without overlaps
pointLabel(ump$layout, labels = rownames(ump$layout), method="SANN", cex=0.6)
dT
tT2
tT2_df <- as.data.frame(tT2)
View(tT2_df)
# summarize test results as "up", "down" or "not expressed"
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05, lfc=1)
dT
summary(dT)
dT
dT_df <- as.data.frame(dT)
View(dT_df)
View(dT_df)
View(tT2_df)
tT2_df[, "logFC" >= 1 & "adj.P.Val" <= 0.05]
tT2_df["logFC" >= 1 & "adj.P.Val" <= 0.05, ]
tT2_df[, "logFC" >= 1]
tT2_df[, "logFC" >= 1 & "adj.P.Val" <= 0.05]
tT2_df[, "logFC" >= 1 & "adj.P.Val" < 0.05]
tT2_df[, "adj.P.Val" <= 0.05]
tT2_df[, tT2_df$logFC >= 1 & tT2_df$adj.P.Val <= 0.05]
tT2_df[tT2_df$logFC >= 1 & tT2_df$adj.P.Val <= 0.05, ]
tT2_df[(tT2_df$logFC >= 1 | tT2_df$logFC <= -1) & tT2_df$adj.P.Val <= 0.05, ]
tT2_df_diffexp <- tT2_df[(tT2_df$logFC >= 1 | tT2_df$logFC <= -1) & tT2_df$adj.P.Val <= 0.05, ]
View(tT2_df_diffexp)
tT2_df_over <- tT2_df_diffexp[tT2_df_diffexp$logFc >= 1]
View(tT2_df_over)
tT2_df_over <- tT2_df_diffexp[tT2_df_diffexp$logFc >= 1, ]
View(tT2_df_over)
View(tT2_df_diffexp)
tT2_df_over <- tT2_df_diffexp[tT2_df_diffexp$logFC >= 1, ]
View(tT2_df_over)
overexpressed_genes <- complete_cases(tT2_df_over$GeneName)
overexpressed_genes <- complete.cases(tT2_df_over$GeneName)
overexpressed_genes
overexpressed_genes <- subset(tT2_df_over, complete.cases(tT2_df_over$GeneName))
overexpressed_genes
View(overexpressed_genes)
overexpressed_genes <- subset(tT2_df_over, complete.cases(tT2_df_over$Name))
overexpressed_genes <- tT2_df_over[tT2_df_over$GeneName != '']
overexpressed_genes <- tT2_df_over[tT2_df_over$GeneName != '',]
overexpressed_genes <- tT2_df_over[tT2_df_over$Gene_Symbol != '',]
overexpressed_genes <- tT2_df_over[tT2_df_over$Gene_Symbol != '',]$Gene_Symbol
colnames(overexpressed_genes) <- "Gene"
colname(overexpressed_genes) <- "Gene"
overexpressed_genes <- as.vector(tT2_df_over[tT2_df_over$Gene_Symbol != '',]$Gene_Symbol)
overexpressed_genes
overexpressed_genes <- append(overexpressed_genes, tT2_df_over[tT2_df_over$Name != '',]$Name)
overexpressed_genes
overexpressed_genes <- unique(overexpressed_genes)
overexpressed_genes
tT2_df_under <- tT2_df_diffexp[tT2_df_diffexp$logFC <= -1, ]
underexpressed_genes <- as.vector(tT2_df_over[tT2_df_under$Gene_Symbol != '',]$Gene_Symbol)
underexpressed_genes <- append(underexpressed_genes, tT2_df_under[tT2_df_over$Name != '',]$Name)
underexpressed_genes <- unique(underexpressed_genes)
underexpressed_genes
fwrite(overexpressed_genes, "overexpressed.txt")
library(data.table)
fwrite(overexpressed_genes, "overexpressed.txt")
fwrite(as.list(overexpressed_genes), "overexpressed.txt")
fwrite(as.list(underexpressed_genes), "underexpressed.txt")
f<-file("overexpressed.txt")
writeLines(overexpressed_genes, f)
fo<-file("overexpressed.txt")
fo<-file("overexpressed.txt")
writeLines(overexpressed_genes, fo)
fo<-file("overexpressed.txt")
writeLines(overexpressed_genes, fo)
fu<-file("underexpressed.txt")
writeLines(underexpressed_genes, fu)
fo<-file("overexpressed.txt")
writeLines(overexpressed_genes, fo)
fu<-file("underexpressed.txt")
writeLines(underexpressed_genes, fu)
View(tT2_df_over)
View(tT2_df)
summary(dT_df)
# summarize test results as "up", "down" or "not expressed"
dT <- decideTests(fit2, adjust.method="fdr", p.value=0.05, lfc=1)
dT_df <- as.data.frame(dT)
summary(dT_df)
View(dT_df)
View(dT)
View(fit2)
summary(dT)
View(gset)
View(gset@phenoData@data)
View(gset@featureData@data)
rownum(tT2_df_over)
View(tT2_df_over)
View(tT2_df_under)
library(tidyverse)
enriched <- list.files(path = "./", pattern="*input1*.tsv") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched <- list.files(path = "./", pattern="*input2*.tsv") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
View(enriched)
list.files(path = "./", pattern="*input2*.tsv")
list.files(path = "./", pattern="*input2*")
enriched <- list.files(path = "./", pattern="*input2*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
View(enriched)
enriched <- enriched[enriched$pval_adj <= 0.05]
enriched <- enriched[enriched$pval_adj <= 0.05, ]
View(enriched)
enriched <- list.files(path = "./", pattern="*input2*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
View(enriched)
enriched <- enriched[enriched$pval_adj <= 0.05, ]
View(enriched)
enriched <- list.files(path = "./", pattern="*input2*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id))) %>% filter(enriched$pval_adj < 0.05)
enriched <- list.files(path = "./", pattern="*input2*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_down <- dplyr::filter(enriched_down, grepl("heart|vessel|tissue|cardiac|pulmonary"))
enriched_down <- list.files(path = "./", pattern="*input2*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_down <- enriched[enriched_down$pval_adj <= 0.05, ]
enriched_down <- dplyr::filter(enriched_down, grepl("heart|vessel|tissue|cardiac|pulmonary"))
enriched_down <- dplyr::filter(enriched_down, grepl("heart|vessel|tissue|cardiac|pulmonary", description))
View(enriched_down)
enriched_down <- dplyr::filter(enriched_down, grepl("heart", description))
enriched_down <- dplyr::filter(enriched_down, grepl("heart|vessel|tissue|card|pulm", description))
enriched_down <- list.files(path = "./", pattern="*input2*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_down_stat_sign <- enriched_down[enriched_down$pval_adj <= 0.05, ]
enriched_down_cat_filter <- dplyr::filter(enriched_down_stat_sign, grepl("heart|vessel|tissue|card|pulm", description))
View(enriched_down_stat_sign)
View(enriched_down_cat_filter)
enriched_down_stat_sign <- enriched_down[enriched_down$pval_adj < 0.05, ]
enriched_down_cat_filter <- dplyr::filter(enriched_down_stat_sign, grepl("heart|vessel|tissue|card|pulm", description))
pheatmap(enriched_down_cat_filter, cluster_rows=TRUE)
library(pheatmap)
pheatmap(enriched_down_cat_filter, cluster_rows=TRUE)
annotation_vs_gene <- enriched_down_cat_filter$description + enriched_down_cat_filter$genes
annotation_vs_gene <- select(enriched_down_cat_filter, description, genes)
View(annotation_vs_gene)
pheatmap(annotation_vs_gene, cluster_rows=TRUE)
library(UpSetR)
install.packages("UpSetR")
library(UpSetR)
gene_sets <- setNames(lapply(strsplit(annotation_vs_gene$genes, ","), unique), annotation_vs_gene$description)
upset(fromList(gene_sets), order.by="freq")
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
words <- annotation_vs_gene$description
freq <- sapply(strsplit(annotation_vs_gene$genes, ","), length)
wordcloud(words, freq, random.order=FALSE, colors = brewer.pal(8, "Dark2"))
upset(fromList(gene_sets), order.by="freq")
install.packages("igraph")
install.packages("ggraph")
# Create edges
edges <- do.call(rbind, lapply(1:nrow(df), function(i) {
data.frame(
Description = annotation_vs_gene$description[i],
Gene = unlist(strsplit(annotation_vs_gene$genes[i], ","))
)
}))
library(igraph)
library(ggraph)
# Create edges
edges <- do.call(rbind, lapply(1:nrow(df), function(i) {
data.frame(
Description = annotation_vs_gene$description[i],
Gene = unlist(strsplit(annotation_vs_gene$genes[i], ","))
)
}))
# Create edges
edges <- do.call(rbind, lapply(1:nrow(annotation_vs_gene), function(i) {
data.frame(
Description = annotation_vs_gene$description[i],
Gene = unlist(strsplit(annotation_vs_gene$genes[i], ","))
)
}))
# Create graph object
g <- graph_from_data_frame(edges)
# Plot
ggraph(g, layout = "fr") +
geom_edge_link() +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
library(networkD3)
install.packages("networkD3")
library(networkD3)
simpleNetwork(g)
simpleNetwork(edges)
simpleNetwork(edges, zoom=TRUE, linkDistance=120, opacity = 100)
upset(fromList(gene_sets), order.by="freq")
library(UpSetR)
gene_sets <- setNames(lapply(strsplit(annotation_vs_gene$genes, ","), unique), annotation_vs_gene$description)
upset(fromList(gene_sets), order.by="freq")
upset(fromList(gene_sets), order.by="freq", color.pal=1)
upset(fromList(gene_sets), order.by="freq", color.pal=2)
upset(fromList(gene_sets), order.by="freq", att.color="red")
View(enriched_down_cat_filter)
simpleNetwork(edges, zoom=TRUE, linkDistance=120, opacity = 100)
simpleNetwork(edges, zoom=TRUE, linkDistance=120, opacity = 100, fontSize=12)
simpleNetwork(edges, zoom=TRUE, linkDistance=120, opacity = 100, fontSize=16)
View(edges)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology"], zoom=TRUE, linkDistance=120, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",], zoom=TRUE, linkDistance=120, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",], zoom=TRUE, linkDistance=200, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",], zoom=TRUE, linkDistance=300, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",], zoom=TRUE, linkDistance=500, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=500, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=500, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=16)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=16, charge=-1)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=16, charge=10)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=16, charge=-10)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=200, opacity = 100, fontSize=12)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=200, opacity = 100, fontSize=12)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",],
zoom=TRUE, linkDistance=200, opacity = 100, fontSize=12)
simpleNetwork(edges[edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=200, opacity = 100, fontSize=12)
edges <- edges %>% group_by(Gene) %>% mutate(Group = ifelse(n() > 1, 1, 2))
library(dplyr)
edges <- edges %>% group_by(Gene) %>% mutate(Group = ifelse(n() > 1, 1, 2))
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=12)
forceNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=12)
# Create graph object
g <- graph_from_data_frame(edges)
# Create edges
edges <- do.call(rbind, lapply(1:nrow(annotation_vs_gene), function(i) {
data.frame(
Description = annotation_vs_gene$description[i],
Gene = unlist(strsplit(annotation_vs_gene$genes[i], ","))
)
}))
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology" | edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=12)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=12)
simpleNetwork(edges[edges$Description == "Dilated cardiomyopathy",],
zoom=TRUE, linkDistance=200, opacity = 100, fontSize=12)
enriched_up <- list.files(path = "./", pattern="*input1*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
library(tidyverse)
enriched_up <- list.files(path = "./", pattern="*input1*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_up_stat_sign <- enriched_up[enriched_up$pval_adj < 0.05, ]
enriched_up_cat_filter <- dplyr::filter(enriched_up_stat_sign, grepl("heart|vessel|tissue|card|pulm", description))
annotation_vs_gene <- select(enriched_up_cat_filter, description, genes)
View(overexpressed_genes)
View(tT2_df)
tT2_df_under <- tT2_df_diffexp[tT2_df_diffexp$logFC <= -1, ]
View(tT2_df_under)
underexpressed_genes <- as.vector(tT2_df_under[tT2_df_under$Gene_Symbol != '',]$Gene_Symbol)
underexpressed_genes <- append(underexpressed_genes, tT2_df_under[tT2_df_over$Name != '',]$Name)
underexpressed_genes <- unique(underexpressed_genes)
fu<-file("underexpressed.txt")
writeLines(underexpressed_genes, fu)
enriched_down <- list.files(path = "./", pattern="*underexpressed*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_down_stat_sign <- enriched_down[enriched_down$pval_adj < 0.05, ]
enriched_down_cat_filter <- dplyr::filter(enriched_down_stat_sign, grepl("heart|vessel|tissue|card|pulm", description))
annotation_vs_gene <- select(enriched_down_cat_filter, description, genes)
gene_sets <- setNames(lapply(strsplit(annotation_vs_gene$genes, ","), unique), annotation_vs_gene$description)
upset(fromList(gene_sets), order.by="freq")
enriched_down <- list.files(path = "./", pattern="*underexpressed*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_down_stat_sign <- enriched_down[enriched_down$pval_adj < 0.05, ]
enriched_down_cat_filter <- dplyr::filter(enriched_down_stat_sign, grepl("heart|vessel|tissue|card|pulm|hyper", description))
annotation_vs_gene <- select(enriched_down_cat_filter, description, genes)
gene_sets <- setNames(lapply(strsplit(annotation_vs_gene$genes, ","), unique), annotation_vs_gene$description)
upset(fromList(gene_sets), order.by="freq")
enriched_up <- list.files(path = "./", pattern="*overexpressed*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_up_stat_sign <- enriched_up[enriched_up$pval_adj < 0.05, ]
enriched_up <- list.files(path = "./", pattern="*overexpressed*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
list.files(path = "./", pattern="*overexpressed*")
enriched_up <- list.files(path = "./", pattern="*overexpressed*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_up_stat_sign <- enriched_up[enriched_up$pval_adj < 0.05, ]
enriched_up_cat_filter <- dplyr::filter(enriched_up_stat_sign, grepl("heart|vessel|tissue|card|pulm", description))
annotation_vs_gene_over <- select(enriched_up_cat_filter, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_over$genes, ","), unique), annotation_vs_gene_over$description)
upset(fromList(gene_sets_under), order.by="freq")
View(annotation_vs_gene_over)
View(enriched_up_stat_sign)
annotation_vs_gene_over <- select(enriched_up_stat_sign, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_over$genes, ","), unique), annotation_vs_gene_over$description)
upset(fromList(gene_sets_under), order.by="freq")
View(annotation_vs_gene_over)
annotation_vs_gene_under <- select(enriched_down_stat_sign, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_under$genes, ","), unique), annotation_vs_gene_under$description)
upset(fromList(gene_sets_under), order.by="freq")
annotation_vs_gene_over <- select(enriched_up_cat_filter, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_over$genes, ","), unique), annotation_vs_gene_over$description)
upset(fromList(gene_sets_under), order.by="freq")
annotation_vs_gene_over <- select(enriched_up_stat_sign, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_over$genes, ","), unique), annotation_vs_gene_over$description)
upset(fromList(gene_sets_under), order.by="freq")
annotation_vs_gene_under <- select(enriched_down_stat_sign, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_under$genes, ","), unique), annotation_vs_gene$description)
upset(fromList(gene_sets_under), order.by="freq")
enriched_down_stat_sign <- enriched_down[enriched_down$pval_adj < 0.05, ]
enriched_down_cat_filter <- dplyr::filter(enriched_down_stat_sign, grepl("heart|vessel|tissue|card|pulm|hyper", description))
annotation_vs_gene_under <- select(enriched_down_stat_sign, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_under$genes, ","), unique), annotation_vs_gene$description)
upset(fromList(gene_sets_under), order.by="freq")
enriched_down <- list.files(path = "./", pattern="*underexpressed*") %>% map_df(~read_tsv(.) %>% mutate(annotation_id = as.character(annotation_id)))
enriched_down_stat_sign <- enriched_down[enriched_down$pval_adj < 0.05, ]
annotation_vs_gene_under <- select(enriched_down_stat_sign, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_under$genes, ","), unique), annotation_vs_gene$description)
upset(fromList(gene_sets_under), order.by="freq")
View(enriched_down_stat_sign)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_under$genes, ","), unique), annotation_vs_gene_under$description)
upset(fromList(gene_sets_under), order.by="freq")
annotation_vs_gene_over <- select(enriched_up_cat_filter, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_over$genes, ","), unique), annotation_vs_gene_over$description)
upset(fromList(gene_sets_under), order.by="freq")
annotation_vs_gene_over <- select(enriched_up_stat_sign, description, genes)
gene_sets_under <- setNames(lapply(strsplit(annotation_vs_gene_over$genes, ","), unique), annotation_vs_gene_over$description)
upset(fromList(gene_sets_under), order.by="freq")
# Create edges
edges <- do.call(rbind, lapply(1:nrow(annotation_vs_gene_under), function(i) {
data.frame(
Description = annotation_vs_gene_under$description[i],
Gene = unlist(strsplit(annotation_vs_gene_under$genes[i], ","))
)
}))
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=12)
annotation_vs_gene_under <- select(enriched_down_cat_filter, description, genes)
# Create edges
edges <- do.call(rbind, lapply(1:nrow(annotation_vs_gene_under), function(i) {
data.frame(
Description = annotation_vs_gene_under$description[i],
Gene = unlist(strsplit(annotation_vs_gene_under$genes[i], ","))
)
}))
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",],
zoom=TRUE, linkDistance=100, opacity = 100, fontSize=12)
View(enriched_down)
simpleNetwork(edges[edges$Description == "Abnormal myocardium morphology",],
zoom=TRUE, linkDistance=200, opacity = 100, fontSize=12)
View(enriched_up_stat_sign)
View(enriched_up)
View(tT2_df)
# Version info: R 4.2.2, Biobase 2.58.0, GEOquery 2.66.0, limma 3.54.0
################################################################
#   Differential expression analysis with limma
library(GEOquery)
library(limma)
library(umap)
gset <- getGEO("GSE26125", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL11329", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
View(gset)
make.names(fvarLabels(gset))
make.names
help(make.names)
knitr::opts_chunk$set(echo=TRUE)
